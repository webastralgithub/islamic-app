{"version":3,"sources":["webpack:///src/app/auth/components/reset-pin/reset-pin.component.ts","webpack:///src/app/auth/components/reset-pin/reset-pin.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/auth/components/reset-password/reset-password.component.ts","webpack:///src/app/auth/components/reset-password/reset-password.component.html","webpack:///src/app/auth/components/login/login.component.ts","webpack:///src/app/auth/components/login/login.component.html","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/auth/components/view-user/view-user.component.ts","webpack:///src/app/auth/components/view-user/view-user.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/modules/journals/journals.component.ts","webpack:///src/app/modules/journals/journals.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["ResetPinComponent","formBuilder","route","router","authService","resetform","new_pin","required","confirm_pin","reset_loading","reset_submitted","group","queryParams","subscribe","params","console","log","checkResetToken","pipe","data","navigate","error","controls","reset_error","reset_success","invalid","resetPin","f","value","msg","onSubmit","selector","templateUrl","styleUrls","environment","production","apiURL","ResetPasswordComponent","new_password","confirm_password","alert","resetPassword","LoginComponent","loginForm","email","minLength","password","loading","submitted","currentUserValue","success","login","navigateByUrl","window","location","reload","SharedModule","declarations","imports","exports","AppComponent","template","ViewUserComponent","viewProfile","res","AppModule","provide","useClass","providers","bootstrap","AuthService","http","token","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","endPoint","post","user","setItem","stringify","patch","removeItem","next","httpOptions","headers","auth_token","response","get","id","status","new_token","confirm_token","providedIn","JournalsComponent","routes","path","loadChildren","then","m","LayoutModule","component","AppRoutingModule","forRoot","relativeLinkResolution","bootstrapModule","err","webpackEmptyAsyncContext","req","Promise","resolve","e","Error","code","keys","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n//Import Router\nimport {Router, ActivatedRoute} from '@angular/router';\n\n//Import Form\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\n\n//Import first\nimport {first} from 'rxjs/operators';\n@Component({\n  selector: 'app-reset-pin',\n  templateUrl: './reset-pin.component.html',\n  styleUrls: ['./reset-pin.component.scss']\n})\nexport class ResetPinComponent implements OnInit {\n\n  \n  resetform = new FormGroup({\n\n    new_pin: new FormControl('', [Validators.required]),\n\n    confirm_pin: new FormControl('', [Validators.required]),\n\n});\n  reset_loading = false;\n  reset_submitted = false;\n  reset_returnUrl!: string;\n  reset_error!: string;\n  reset_success!: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService\n   \n  ) { \n\n    // redirect to home if already logged in\n    // if(this.authService.currentUserValue){\n    //   this.router.navigate(['user']);\n    // }\n\n  }\n\n  ngOnInit() {\n\n    this.resetform = this.formBuilder.group({\n      new_pin: ['', Validators.required],\n      confirm_pin: ['', Validators.required]\n    });\n\n    this.route.queryParams.subscribe(params=>{\n      if(params['token'] && params['id']){\n        console.log(params['token'],params['id']);\n        this.authService.checkResetToken(params['id'],params['token']).pipe(first())\n        .subscribe(\n          data =>{\n        //  this.reset_loading = true;\n        console.log(data);\n        \n    \n            if(data === false){\n              this.router.navigate(['']);\n            }\n            \n            \n          },\n          error =>{\n            console.log(error);\n            \n            \n          }\n        )\n        \n      }\n    })\n\n  }\n\n\n  //convinience getter for easy access to form fields\n  get f(){ return this.resetform.controls;}\n\n  onSubmit(){\n\n    this.reset_submitted = true;\n    console.log(this.resetform.controls);\n    // return false;\n   \n\n    // reset alerts on submit\n    this.reset_error = '';\n    this.reset_success = '';\n\n    //stop here if the form is invalid\n    if(this.resetform.invalid){\n     \n     return;\n    }\n\n\n    this.authService.resetPin(this.f.new_pin.value, this.f.confirm_pin.value)\n    .pipe(first())\n    .subscribe(\n      data =>{\n     this.reset_loading = true;\n     console.log(data);\n     this.reset_success = 'Reset pin Successfully !!!'\n      this.router.navigate(['']);\n        \n        \n      },\n      error =>{\n        this.reset_error = error.error.msg;\n\n        // console.log(error);\n        \n        \n      }\n    )\n  }\n\n\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 mt-5 bg-white p-5\">\n            <div class=\"login-form-div\">\n                 <div *ngIf=\"reset_error\" class=\"alert alert-danger\">{{reset_error}}</div>\n                <div *ngIf=\"reset_success\" class=\"alert alert-success\">{{reset_success}}</div> \n                <h2 class=\"text-center\">Reset pin</h2>\n                <br>\n                <form [formGroup]=\"resetform\" (ngSubmit)=\"onSubmit()\">\n                    \n                    <div class=\"form-group\">\n                        <label for=\"pin\">New Pin</label>\n                        <input type=\"password\" formControlName=\"new_pin\" class=\"form-control\" maxlength=\"5\" [ngClass]=\"{ 'is-invalid': reset_submitted && f.new_pin.errors }\" />\n                        <div *ngIf=\"reset_submitted && f.new_pin.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.new_pin.errors.required\">New Pin is required</div>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"pin\">Confirm pin</label>\n                        <input type=\"password\" formControlName=\"confirm_pin\" class=\"form-control\" maxlength=\"5\" [ngClass]=\"{ 'is-invalid': reset_submitted && f.confirm_pin.errors }\" />\n                        <div *ngIf=\"reset_submitted && f.confirm_pin.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.confirm_pin.errors.required\">pin is required</div>\n                        </div>\n                    </div>\n                    <br>\n                    <div class=\"form-group\">\n                        <button [disabled]=\"reset_loading\" class=\"btn btn-danger btn-block\">\n                            <span *ngIf=\"reset_loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                            Reset pin\n                        </button>\n                        <br>\n                        <!-- <p>Not created account yet? <a routerLink=\"/register\">Register</a></p> -->\n                    </div>\n                </form>\n            </div>\n        </div>\n        \n    </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n \tapiURL: \"http://112.196.64.119:8000/api/\",\n};\n\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n//Import Router\nimport {Router, ActivatedRoute} from '@angular/router';\n\n//Import Form\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\n\n//Import first\nimport {first} from 'rxjs/operators';\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  resetform = new FormGroup({\n\n    new_password: new FormControl('', [Validators.required]),\n\n    confirm_password: new FormControl('', [Validators.required]),\n\n});\n  reset_loading = false;\n  reset_submitted = false;\n  reset_returnUrl!: string;\n  reset_error!: string;\n  reset_success!: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService\n   \n  ) { \n\n    //redirect to home if already logged in\n    // if(this.authService.currentUserValue){\n    //   this.router.navigate(['dashboard']);\n    // }\n\n  }\n\n  ngOnInit() {\n\n    this.resetform = this.formBuilder.group({\n      new_password: ['', Validators.required],\n      confirm_password: ['', Validators.required]\n    });\n\n  }\n\n\n  //convinience getter for easy access to form fields\n  get f(){ return this.resetform.controls;}\n\n  onSubmit(){\n    // alert('heyyy');\n    this.reset_submitted = true;\n    console.log(this.resetform.controls);\n    // return false;\n   \n\n    // reset alerts on submit\n    this.reset_error = '';\n    this.reset_success = '';\n\n    //stop here if the form is invalid\n    if(this.resetform.invalid){\n     alert('error')\n    }\n\n\n    this.authService.resetPassword(this.f.new_password.value, this.f.confirm_password.value)\n    .pipe(first())\n    .subscribe(\n      data =>{\n     this.reset_loading = true;\n\n        // this.router.navigateByUrl('/');\n        // window.location.reload();\n        // this.reset_success = 'Login successfully';\n        console.log(data);\n        \n        \n      },\n      error =>{\n        this.reset_error = error.error.msg;\n        \n      }\n    )\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 mt-5 bg-white p-5\">\n            <div class=\"login-form-div\">\n                 <div *ngIf=\"reset_error\" class=\"alert alert-danger\">{{reset_error}}</div>\n                <div *ngIf=\"reset_success\" class=\"alert alert-success\">{{reset_success}}</div> \n                <h2 class=\"text-center\">Reset Password</h2>\n                <br>\n                <form [formGroup]=\"resetform\" (ngSubmit)=\"onSubmit()\">\n                    \n                    <div class=\"form-group\">\n                        <label for=\"password\">New Password</label>\n                        <input type=\"password\" formControlName=\"new_password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': reset_submitted && f.password.errors }\" />\n                        <div *ngIf=\"reset_submitted && f.new_password.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.new_password.errors.required\">Password is required</div>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"password\">Confirm Password</label>\n                        <input type=\"password\" formControlName=\"confirm_password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': reset_submitted && f.password.errors }\" />\n                        <div *ngIf=\"reset_submitted && f.confirm_password.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.confirm_password.errors.required\">Password is required</div>\n                        </div>\n                    </div>\n                    <br>\n                    <div class=\"form-group\">\n                        <button [disabled]=\"reset_loading\" class=\"btn btn-danger btn-block\">\n                            <span *ngIf=\"reset_loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                            Reset Password\n                        </button>\n                        <br>\n                        <!-- <p>Not created account yet? <a routerLink=\"/register\">Register</a></p> -->\n                    </div>\n                </form>\n            </div>\n        </div>\n        \n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n//Import Router\nimport {Router, ActivatedRoute} from '@angular/router';\n\n//Import Form\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\n\n\n\n//Import first\nimport {first} from 'rxjs/operators';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  \n  loginForm = new FormGroup({\n\n    email: new FormControl('', [Validators.required, Validators.minLength(3),Validators.email]),\n\n    password: new FormControl('', [Validators.required, Validators.email]),\n\n});\n  loading = false;\n  submitted = false;\n  returnUrl!: string;\n  error!: string;\n  success!: string;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService\n   \n  ) { \n\n    //redirect to home if already logged in\n    if(this.authService.currentUserValue){\n      this.router.navigate(['dashboard']);\n    }\n\n  }\n\n  ngOnInit() {\n\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n\n  }\n\n\n  //convinience getter for easy access to form fields\n  get f(){ return this.loginForm.controls;}\n\n  onSubmit(){\n\n    this.submitted = true;\n\n    // reset alerts on submit\n    this.error = '';\n    this.success = '';\n\n    //stop here if the form is invalid\n    if(this.loginForm.invalid){\n      return;\n    }\n\n\n    this.authService.login(this.f.email.value, this.f.password.value)\n    .pipe(first())\n    .subscribe(\n      data =>{\n    this.loading = true;\n\n        this.router.navigateByUrl('/');\n        window.location.reload();\n        this.success = 'Login successfully';\n        \n      },\n      error =>{\n        this.error = error.error.msg;\n        \n      }\n    )\n  }\n\n\n}\n","<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-6 offset-md-3 mt-5 bg-white p-5\">\n            <div class=\"login-form-div\">\n                 <div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\n                <div *ngIf=\"success\" class=\"alert alert-success\">{{success}}</div> \n                <h2 class=\"text-center\">Login</h2>\n                <br>\n                <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n                    <div class=\"form-group\">\n                        <label for=\"email\">Email</label>\n                        <input type=\"text\" formControlName=\"email\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" ngModel [email]=\"true\"/>\n                        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"password\">Password</label>\n                        <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                            <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                        </div>\n                    </div>\n                    <br>\n                    <div class=\"form-group\">\n                        <button [disabled]=\"loading\" class=\"btn btn-danger btn-block\">\n                            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\n                            Login\n                        </button>\n                        <br>\n                        <!-- <p>Not created account yet? <a routerLink=\"/register\">Register</a></p> -->\n                    </div>\n                </form>\n            </div>\n        </div>\n        \n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatRadioModule,\n    MatTooltipModule,\n    MatRippleModule,\n  ],\n\n  exports:[\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatRadioModule,\n    MatTooltipModule,\n    MatRippleModule,\n  ]\n\n})\nexport class SharedModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<router-outlet></router-outlet>`,\n  styleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent {}\n","import { Component, OnInit } from '@angular/core';\n\n//Import Router\nimport {Router, ActivatedRoute} from '@angular/router';\n\nimport { AuthService } from 'src/app/services/auth.service';\n\nimport {first} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-view-user',\n  templateUrl: './view-user.component.html',\n  styleUrls: ['./view-user.component.scss']\n})\nexport class ViewUserComponent implements OnInit {\n\n  user:any;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private authService: AuthService\n  ) { }\n\n  ngOnInit(): void {\n    this.authService.viewProfile('60ffe739f68b6b24db7c1c11').subscribe((res)=>{\n      console.log(res);\n      \n    })\n  }\n\n  \n  \n\n}\n","<p>view-user works!</p>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SharedModule } from './shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { LoginComponent } from './auth/components/login/login.component';\nimport { ResetPasswordComponent } from './auth/components/reset-password/reset-password.component';\nimport { ResetPinComponent } from './auth/components/reset-pin/reset-pin.component';\nimport { JournalsComponent } from './modules/journals/journals.component';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    ResetPasswordComponent,\n    ResetPinComponent,\n    JournalsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    SharedModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule\n  ],\n providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\n\n//Import HttpClient\n// import {HttpClient} from '@angular/common/http';\n\n//Import Observables and Behaviour Subject\nimport {Observable, BehaviorSubject} from 'rxjs';\nimport { HttpHeaders,HttpClient } from \"@angular/common/http\";\n//Import Map\nimport {map} from 'rxjs/operators';\n\n//Import API URL\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private currentUserSubject: BehaviorSubject<any>;\n  public currentUser: any;\n\n\n  constructor(private http: HttpClient) { \nconst token:any = localStorage.getItem('currentUser'); \n    this.currentUserSubject = new BehaviorSubject<any>(JSON.parse(token));\n    this.currentUser = this.currentUserSubject.asObservable();\nconsole.log(this.currentUser);\nthis.currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');\n\n  }\n\n  public get currentUserValue(){\n\n    return this.currentUserSubject.value;\n\n  }\n\n  login(email:any, password:any){\n    const endPoint = environment.apiURL + 'admin/login';\n    return this.http.post<any>(endPoint, {email, password})\n      .pipe(map(user=>{\n\n        //Store user details and jwt int local storage to keep user logged in\n        localStorage.setItem('currentUser',JSON.stringify(user));\n        return user;\n      }));\n  }\n\n  resetPassword(new_password:string, confirm_password:string){\n    const endPoint = environment.apiURL + 'user/reset/60f80396a4f7811c8dad57c7';\n    return this.http.patch<any>(endPoint, {new_password, confirm_password})\n      .pipe(map(user=>{\n        console.log(user);\n        return user;\n      }));\n  }\n\n  logout(){\n\n    localStorage.removeItem('currentUser');    \n    this.currentUserSubject.next(null);\n  }\n\n  getUsers(): Observable<any> {\n    // console.log(this.currentUser.auth_token);\n    \n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/xml',\n        'auth-token':this.currentUser.auth_token\n      })\n    };\n    const endPoint = environment.apiURL + \"admin/users/\";\n    const response = this.http.get<any>(endPoint,httpOptions);\n    return response;\n  }\n\n  deleteUser(id:string): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/xml',\n        'auth-token':this.currentUser.auth_token\n      })\n    };\n    const endPoint = environment.apiURL + \"admin/user/delete/\"+id;\n    const response = this.http.delete<any>(endPoint,httpOptions);\n    return response;\n  }\n\n\n  changeUserStatus(status:boolean,id:string): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/xml',\n        'auth-token':this.currentUser.auth_token\n      })\n    };\n    const endPoint = environment.apiURL + \"admin/user/changeStatus/\"+id;\n    const response = this.http.patch<any>(endPoint,{status},httpOptions);\n    return response;\n  }\n\n  checkResetToken(id:string,token:string): Observable<any> {\n    const endPoint = environment.apiURL + \"user/checkToken/\"+token;\n    const response = this.http.get<any>(endPoint);\n    return response;\n  }\n\n\n  resetPin(new_token:string, confirm_token:string){\n    const endPoint = environment.apiURL + 'user/resetPin/60f80396a4f7811c8dad57c7';\n    return this.http.patch<any>(endPoint, {new_token, confirm_token})\n      .pipe(map(user=>{\n        console.log(user);\n        return user;\n      }));\n  }\n\n  viewProfile(id:any): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/xml',\n        'auth-token':this.currentUser.auth_token\n      })\n    };\n    const endPoint = environment.apiURL + \"admin/viewuser/\"+id;\n    const response = this.http.get<any>(endPoint,httpOptions);\n    return response;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-journals',\n  templateUrl: './journals.component.html',\n  styleUrls: ['./journals.component.scss']\n})\nexport class JournalsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>journals works!</p>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './auth/components/login/login.component';\nimport { ResetPasswordComponent } from './auth/components/reset-password/reset-password.component';\nimport { ResetPinComponent } from './auth/components/reset-pin/reset-pin.component';\nimport { ViewUserComponent } from './auth/components/view-user/view-user.component';\n\n\n\nconst routes: Routes = [\n  {\n    path: 'dashboard',\n    loadChildren: () => import('./layout/layout.module').then(m => m.LayoutModule)\n  },\n  { path: '', component: LoginComponent },\n  {path: 'reset', component: ResetPasswordComponent},\n  {path: 'reset-pin', component: ResetPinComponent},\n  {path: 'view-user', component: ViewUserComponent},\n\n  // {\n  //   path: '**', loadChildren: ()\n  // }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}